type token =
  | VAR of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | ASTERISK
  | SLASH
  | EQUAL
  | LESS
  | GREATER
  | COLCOL
  | LPAREN
  | RPAREN
  | LBRA
  | RBRA
  | ARROW
  | VBAR
  | SEMICOL
  | TRUE
  | FALSE
  | FUN
  | LET
  | REC
  | IN
  | IF
  | THEN
  | ELSE
  | MATCH
  | WITH
  | HEAD
  | TAIL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "lib/parser.mly"
open Syntax
# 39 "lib/parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* ASTERISK *);
  262 (* SLASH *);
  263 (* EQUAL *);
  264 (* LESS *);
  265 (* GREATER *);
  266 (* COLCOL *);
  267 (* LPAREN *);
  268 (* RPAREN *);
  269 (* LBRA *);
  270 (* RBRA *);
  271 (* ARROW *);
  272 (* VBAR *);
  273 (* SEMICOL *);
  274 (* TRUE *);
  275 (* FALSE *);
  276 (* FUN *);
  277 (* LET *);
  278 (* REC *);
  279 (* IN *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  283 (* MATCH *);
  284 (* WITH *);
  285 (* HEAD *);
  286 (* TAIL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\005\000\005\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\003\000\001\000\001\000\001\000\001\000\
\002\000\003\000\003\000\001\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\004\000\006\000\008\000\006\000\004\000\001\000\003\000\005\000\
\001\000\001\000\001\000\001\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\030\000\005\000\006\000\000\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\012\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\013\000\011\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\033\000\034\000\
\000\000\035\000\036\000\000\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\023\000\024\000\019\000\068\000\069\000"

let yysindex = "\015\000\
\158\255\000\000\000\000\000\000\000\000\158\255\158\255\121\255\
\000\000\000\000\017\255\001\255\158\255\158\255\006\255\006\255\
\000\000\118\001\000\000\006\255\211\001\000\000\230\001\008\255\
\011\255\021\255\028\255\163\001\197\255\000\000\000\000\158\255\
\158\255\158\255\158\255\158\255\158\255\158\255\158\255\000\000\
\000\000\000\000\158\255\000\000\158\255\158\255\029\255\158\255\
\002\255\066\001\066\001\006\255\006\255\096\255\096\255\096\255\
\096\255\000\000\249\001\234\255\032\255\137\001\000\000\000\000\
\026\255\000\000\000\000\027\255\255\254\158\255\158\255\158\255\
\000\000\002\255\002\255\158\255\249\001\188\001\249\001\031\255\
\038\255\249\001\158\255\158\255\249\001\249\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\037\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\255\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\131\000\053\000\079\000\153\000\175\000\197\000\
\219\000\000\000\234\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\000\000\000\016\001\000\000\
\043\255\038\001\000\000\000\000\064\001\090\001"

let yygindex = "\000\000\
\000\000\255\255\016\000\034\000\000\000\192\255"

let yytablesize = 780
let yytable = "\018\000\
\029\000\026\000\063\000\064\000\020\000\021\000\004\000\005\000\
\075\000\080\000\081\000\028\000\029\000\076\000\065\000\001\000\
\007\000\025\000\008\000\066\000\067\000\044\000\027\000\009\000\
\010\000\045\000\014\000\046\000\047\000\061\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\071\000\073\000\
\075\000\000\000\074\000\059\000\060\000\084\000\062\000\075\000\
\030\000\031\000\002\000\041\000\017\000\041\000\041\000\003\000\
\041\000\038\000\058\000\000\000\000\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\077\000\078\000\079\000\000\000\
\000\000\000\000\082\000\000\000\000\000\000\000\018\000\000\000\
\000\000\085\000\086\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\041\000\041\000\000\000\041\000\
\004\000\005\000\032\000\033\000\034\000\035\000\000\000\000\000\
\015\000\039\000\007\000\000\000\008\000\000\000\041\000\041\000\
\041\000\009\000\010\000\041\000\000\000\000\000\041\000\041\000\
\003\000\004\000\005\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\016\000\007\000\000\000\008\000\022\000\000\000\
\000\000\000\000\009\000\010\000\011\000\012\000\000\000\000\000\
\013\000\000\000\000\000\014\000\000\000\015\000\016\000\000\000\
\019\000\000\000\000\000\000\000\000\000\003\000\004\000\005\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\008\000\000\000\000\000\000\000\020\000\009\000\
\010\000\011\000\012\000\000\000\000\000\013\000\000\000\000\000\
\014\000\000\000\015\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\004\000\005\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\007\000\
\000\000\008\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\004\000\005\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\007\000\000\000\008\000\000\000\
\026\000\000\000\000\000\009\000\010\000\000\000\000\000\000\000\
\070\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\028\000\
\000\000\029\000\029\000\029\000\000\000\000\000\000\000\029\000\
\000\000\029\000\029\000\000\000\029\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\031\000\014\000\000\000\
\014\000\000\000\014\000\014\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\014\000\014\000\000\000\014\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\027\000\
\017\000\000\000\017\000\000\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\017\000\017\000\000\000\
\017\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\032\000\018\000\000\000\018\000\000\000\018\000\018\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\018\000\
\018\000\000\000\018\000\015\000\015\000\000\000\000\000\015\000\
\015\000\015\000\015\000\000\000\015\000\040\000\015\000\000\000\
\015\000\015\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\015\000\015\000\000\000\015\000\016\000\016\000\000\000\
\000\000\016\000\016\000\016\000\016\000\000\000\016\000\000\000\
\016\000\000\000\016\000\016\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\016\000\016\000\000\000\016\000\019\000\
\019\000\019\000\000\000\000\000\019\000\000\000\019\000\000\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\019\000\019\000\000\000\019\000\020\000\020\000\020\000\
\000\000\000\000\020\000\000\000\020\000\000\000\020\000\020\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\020\000\
\020\000\000\000\020\000\021\000\021\000\021\000\000\000\000\000\
\021\000\000\000\021\000\000\000\021\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\021\000\021\000\000\000\
\021\000\022\000\022\000\022\000\000\000\000\000\022\000\000\000\
\022\000\000\000\022\000\022\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\022\000\022\000\025\000\022\000\025\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\025\000\025\000\026\000\025\000\026\000\000\000\
\026\000\026\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\026\000\026\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\028\000\000\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\028\000\028\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\031\000\000\000\031\000\031\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\031\000\031\000\
\000\000\031\000\004\000\005\000\000\000\000\000\034\000\035\000\
\000\000\000\000\000\000\027\000\007\000\027\000\008\000\027\000\
\027\000\000\000\000\000\009\000\010\000\000\000\027\000\000\000\
\027\000\027\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\032\000\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\032\000\032\000\000\000\032\000\004\000\005\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\007\000\000\000\008\000\000\000\000\000\000\000\000\000\009\000\
\010\000\004\000\005\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\007\000\000\000\008\000\000\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\004\000\005\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\007\000\000\000\008\000\
\000\000\000\000\000\000\000\000\009\000\010\000\000\000\000\000\
\000\000\000\000\000\000\048\000\004\000\005\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\007\000\000\000\
\008\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\000\000\000\000\083\000\004\000\005\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\007\000\042\000\008\000\
\000\000\000\000\000\000\000\000\009\000\010\000\004\000\005\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\007\000\000\000\008\000\000\000\000\000\000\000\043\000\009\000\
\010\000\004\000\005\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\007\000\000\000\008\000\000\000\000\000\
\000\000\000\000\009\000\010\000"

let yycheck = "\001\000\
\000\000\001\001\001\001\002\001\006\000\007\000\001\001\002\001\
\010\001\074\000\075\000\013\000\014\000\015\001\013\001\001\000\
\011\001\001\001\013\001\018\001\019\001\014\001\022\001\018\001\
\019\001\015\001\000\000\007\001\001\001\001\001\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\007\001\014\001\
\010\001\255\255\016\001\045\000\046\000\015\001\048\000\010\001\
\015\000\016\000\014\001\018\000\000\000\020\000\021\000\014\001\
\023\000\015\001\043\000\255\255\255\255\028\000\029\000\255\255\
\255\255\255\255\255\255\255\255\070\000\071\000\072\000\255\255\
\255\255\255\255\076\000\255\255\255\255\255\255\000\000\255\255\
\255\255\083\000\084\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\255\255\059\000\060\000\255\255\062\000\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\000\000\010\001\011\001\255\255\013\001\255\255\077\000\078\000\
\079\000\018\001\019\001\082\000\255\255\255\255\085\000\086\000\
\000\001\001\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\000\000\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\029\001\030\001\255\255\
\000\000\255\255\255\255\255\255\255\255\000\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\011\001\255\255\013\001\255\255\255\255\255\255\000\000\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\027\001\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\255\255\
\000\000\255\255\255\255\018\001\019\001\255\255\255\255\255\255\
\023\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\000\000\
\255\255\017\001\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\025\001\026\001\255\255\028\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\000\000\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\026\001\255\255\028\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\000\000\
\012\001\255\255\014\001\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\026\001\255\255\
\028\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\000\000\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\023\001\255\255\025\001\
\026\001\255\255\028\001\003\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\012\001\000\000\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\023\001\
\255\255\025\001\026\001\255\255\028\001\003\001\004\001\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\026\001\255\255\028\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\023\001\
\255\255\025\001\026\001\255\255\028\001\007\001\008\001\009\001\
\255\255\255\255\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\023\001\255\255\025\001\
\026\001\255\255\028\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\026\001\255\255\
\028\001\007\001\008\001\009\001\255\255\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\026\001\012\001\028\001\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\025\001\026\001\012\001\028\001\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\023\001\
\255\255\025\001\026\001\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\025\001\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\023\001\255\255\025\001\026\001\
\255\255\028\001\001\001\002\001\255\255\255\255\005\001\006\001\
\255\255\255\255\255\255\012\001\011\001\014\001\013\001\016\001\
\017\001\255\255\255\255\018\001\019\001\255\255\023\001\255\255\
\025\001\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\025\001\026\001\255\255\028\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\025\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\255\255\255\255\017\001\018\001\
\019\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  ASTERISK\000\
  SLASH\000\
  EQUAL\000\
  LESS\000\
  GREATER\000\
  COLCOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRA\000\
  RBRA\000\
  ARROW\000\
  VBAR\000\
  SEMICOL\000\
  TRUE\000\
  FALSE\000\
  FUN\000\
  LET\000\
  REC\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  MATCH\000\
  WITH\000\
  HEAD\000\
  TAIL\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 59 "lib/parser.mly"
    ( _1 )
# 381 "lib/parser.ml"
               : Syntax.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "lib/parser.mly"
        ( Cons(_1, Empty) )
# 388 "lib/parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 64 "lib/parser.mly"
                ( Cons(_1, Empty) )
# 395 "lib/parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_inner) in
    Obj.repr(
# 65 "lib/parser.mly"
                           ( Cons(_1, _3) )
# 403 "lib/parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "lib/parser.mly"
    ( Var _1 )
# 410 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "lib/parser.mly"
    ( IntLit _1 )
# 417 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "lib/parser.mly"
    ( BoolLit true )
# 423 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "lib/parser.mly"
    ( BoolLit false )
# 429 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "lib/parser.mly"
              ( Empty )
# 435 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_inner) in
    Obj.repr(
# 82 "lib/parser.mly"
                         ( _2 )
# 442 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 85 "lib/parser.mly"
    ( _2 )
# 449 "lib/parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 90 "lib/parser.mly"
    ( _1 )
# 456 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 93 "lib/parser.mly"
    ( App (_1, _2) )
# 464 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 96 "lib/parser.mly"
    ( Minus (IntLit 0, _2) )
# 471 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "lib/parser.mly"
    ( Plus (_1, _3) )
# 479 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 102 "lib/parser.mly"
    ( Minus (_1, _3) )
# 487 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "lib/parser.mly"
    ( Times (_1, _3) )
# 495 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 108 "lib/parser.mly"
    ( Div (_1, _3) )
# 503 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 111 "lib/parser.mly"
    ( Eq (_1, _3) )
# 511 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 114 "lib/parser.mly"
    ( Less (_1, _3) )
# 519 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 117 "lib/parser.mly"
    ( Greater (_1, _3) )
# 527 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "lib/parser.mly"
    ( Cons (_1, _3) )
# 535 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 123 "lib/parser.mly"
    ( Head _2 )
# 542 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 126 "lib/parser.mly"
    ( Tail _2 )
# 549 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 129 "lib/parser.mly"
    ( Fun (_2, _4) )
# 557 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 132 "lib/parser.mly"
    ( Let (_2, _4, _6) )
# 566 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 135 "lib/parser.mly"
    ( LetRec (_3, _4, _6, _8) )
# 576 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "lib/parser.mly"
    ( If (_2, _4, _6) )
# 585 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cases_rev) in
    Obj.repr(
# 141 "lib/parser.mly"
    ( Match (_2, List.rev _4) )
# 593 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "lib/parser.mly"
    ( 
      let message =
        Printf.sprintf 
          "parse error near characters %d-%d"
          (Parsing.symbol_start ())
	        (Parsing.symbol_end ())
	    in
	    failwith message
	  )
# 607 "lib/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 157 "lib/parser.mly"
    ( [(_1, _3)] )
# 615 "lib/parser.ml"
               : 'cases_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'cases_rev) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 160 "lib/parser.mly"
    ( (_3, _5) :: _1 )
# 624 "lib/parser.ml"
               : 'cases_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "lib/parser.mly"
    ( Var _1 )
# 631 "lib/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 168 "lib/parser.mly"
    ( IntLit _1 )
# 638 "lib/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "lib/parser.mly"
    ( BoolLit true )
# 644 "lib/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "lib/parser.mly"
    ( BoolLit false )
# 650 "lib/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "lib/parser.mly"
    ( Empty )
# 656 "lib/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 180 "lib/parser.mly"
    ( Cons (_1, _3) )
# 664 "lib/parser.ml"
               : 'pattern))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.exp)
